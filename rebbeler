#!/usr/bin/env ruby

require 'bundler/setup'
require 'net/dns'
require 'pp'
require 'ostruct'

class Checker
  attr_accessor :ip

  def initialize(to_check)
    @ip = resolve_to_ip(to_check)

  end

  def resolve_to_ip name_to_lookup
    begin
      IPAddr.new(name_to_lookup)
    rescue ArgumentError => e
      Resolver(name_to_lookup).answer.first.address
    end
  end

  def check(&blk)
    rbls.each do |line|
      rbl_domain = line.strip
      name = name_to_lookup rbl_domain

      answer = resolver.query(name).answer
      if answer.length > 0
        rbl_response_code = answer.first.address
        text = resolver.query(name, Net::DNS::TXT).answer
        rbl_txt_message = text.first.nil? ? "" : text.first.txt
        yield({ rbl: rbl_domain, result: rbl_response_code, message: rbl_txt_message })
      else
        yield({ rbl: rbl_domain, result: "", message: 'Not Listed' })
      end
    end
  end

  def rbls
    @@rbls ||= DATA.readlines.sort.map { |l| l.strip }
  end

  def name_to_lookup(rbl_domain)
    ip.reverse.gsub(/in-addr.arpa/, rbl_domain)
  end

  def resolver
    @resolver ||= Net::DNS::Resolver.new(:nameservers => ['127.0.0.1'] * 10) #['8.8.8.8','8.8.4.4'])
  end
end

def do_server
  require 'sinatra'
  require "sinatra/reloader" if development?
  require 'sinatra-websocket'
  require 'haml'
  require 'json'
  require 'rbconfig'

  set :server, 'thin'

  get '/', provides: 'html' do
    haml :index
  end

  get '/req' do
    return unless request.websocket?

    request.websocket do |ws|
      ws.onopen do
      end

      ws.onmessage do |msg|
        thing = Thread.new do
          begin
            checker = Checker.new msg
            checker.check do |response|
              EM.next_tick { ws.send(response.to_json + "\n\n") }
            end
          rescue Exception => e
            puts e
            raise e
          end
          Thread.self.join
          ws.close()
        end
        thing.run
      end

      ws.onclose do
      end
    end
  end

  if RbConfig::CONFIG['host_os'] =~ /^darwin/
    sleep 5
    system("open http://localhost:4567/")
  end
end

def do_commandline
  key = ARGV.first
  checker = Checker.new key
  format = "%-55s %-16s %-s"
  checker.check do |response|
    response = OpenStruct.new response
    puts format % [ response.rbl, response.result, response.message ]
  end
end

if ARGV.first == 'server'
  do_server
else
  do_commandline
end


__END__
dnsbl.kineticweb.com
cbl.abuseat.org
b.barracudacentral.org
dnsbl.sorbs.net
http.dnsbl.sorbs.net
dul.dnsbl.sorbs.net
misc.dnsbl.sorbs.net
smtp.dnsbl.sorbs.net
socks.dnsbl.sorbs.net
spam.dnsbl.sorbs.net
web.dnsbl.sorbs.net
zombie.dnsbl.sorbs.net
dnsbl-1.uceprotect.net
dnsbl-2.uceprotect.net
dnsbl-3.uceprotect.net
pbl.spamhaus.org
sbl.spamhaus.org
xbl.spamhaus.org
zen.spamhaus.org
bl.spamcannibal.org
psbl.surriel.com
ubl.unsubscore.com
dnsbl.njabl.org
combined.njabl.org
rbl.spamlab.com
dnsbl.ahbl.org
ircbl.ahbl.org
dyna.spamrats.com
noptr.spamrats.com
spam.spamrats.com
cbl.anti-spam.org.cn
cdl.anti-spam.org.cn
dnsbl.inps.de
drone.abuse.ch
httpbl.abuse.ch
dul.ru
korea.services.net
short.rbl.jp
virus.rbl.jp
spamrbl.imp.ch
wormrbl.imp.ch
virbl.bit.nl
rbl.suresupport.com
dsn.rfc-ignorant.org
ips.backscatterer.org
spamguard.leadmon.net
opm.tornevall.org
netblock.pedantic.org
multi.surbl.org
ix.dnsbl.manitu.net
tor.dan.me.uk
rbl.efnetrbl.org
relays.mail-abuse.org
blackholes.mail-abuse.org
rbl-plus.mail-abuse.org
dnsbl.dronebl.org
access.redhawk.org
db.wpbl.info
rbl.interserver.net
query.senderbase.org
bogons.cymru.com
csi.cloudmark.com
